{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"d3\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./ChordPanel.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__200__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import React, { useRef, useEffect } from 'react';\nimport { DataFrame, PanelProps } from '@grafana/data';\nimport { withTheme2, Themeable2 } from '@grafana/ui';\nimport { ChordOptions } from 'types';\nimport * as d3 from 'd3';\n\ninterface Props extends Themeable2, PanelProps<ChordOptions> {}\n\nexport const UnthemedChordPanel: React.FC<Props> = ({ options, data, width, height, theme }) => {\n  const d3Container = useRef(null);\n  // GetFieldVal reads field's value from data series\n  function GetFieldVal(fieldName: string) {\n    return data.series\n      .map((series: DataFrame) => series.fields.find((field: any) => field.name.toLowerCase() === fieldName.toLowerCase()))\n      .map((field: any) => {\n        let record = field?.values as any;\n        if(Array.isArray(record)) {\n          return record\n        } else {\n          return record?.buffer;\n        }\n      })[0];\n  }\n\n  useEffect(() => {\n    if (data && d3Container.current) {\n      // Remove added 'g' and '.tooltip' elements before each draw to remove\n      // have multiple rendered graphs while resizing\n      d3.select('g').remove();\n      d3.selectAll('.tooltip').remove();\n\n      const svg = d3.select(d3Container.current);\n\n      const margin = { left: 0, top: 0, right: 0, bottom: 0 };\n      let onClick = false;\n      const w = width + margin.left + margin.right;\n      const h = height + margin.top + margin.bottom;\n      const x = width / 2 + margin.left;\n      const y = height / 2 + margin.top;\n\n      // step-1: process data\n\n      let records = [];\n      let sourcePods = GetFieldVal('srcPod');\n      if (sourcePods !== undefined) {\n        let sourcePorts = GetFieldVal('srcPort');\n        let destinationSvcs = GetFieldVal('dstSvc');\n        let destinationSvcPorts = GetFieldVal('dstSvcPort');\n        let destinationPods = GetFieldVal('dstPod');\n        let destinationPorts = GetFieldVal('dstPort');\n        let destinationIPs = GetFieldVal('dstIP');\n        let bytes = GetFieldVal('bytes');\n        let reverseBytes = GetFieldVal('revBytes');\n        let egressNPs = GetFieldVal('egressNetworkPolicyName');\n        let egressRuleActions = GetFieldVal('egressNetworkPolicyRuleAction');\n        let ingressNPs = GetFieldVal('ingressNetworkPolicyName');\n        let ingressRuleActions = GetFieldVal('ingressNetworkPolicyRuleAction');\n        let n = sourcePods.length;\n        for (let i = 0; i < n; i++) {\n          let record = [];\n          let source = sourcePods[i];\n          let sourcePort = sourcePorts[i];\n          let destination = destinationSvcs[i];\n          let destinationPort = destinationSvcPorts[i];\n          if (destination === '' || destination === null) {\n            if (destinationPods[i] === '/' || destinationPods[i] === '' || destinationPods[i] === null) {\n              destination = destinationIPs[i];\n            } else {\n              destination = destinationPods[i];\n              destinationPort = destinationPorts[i];\n            }\n          }\n          record.push(source);\n          record.push(sourcePort);\n          record.push(destination);\n          record.push(destinationPort);\n          record.push(bytes[i]);\n          record.push(reverseBytes[i]);\n          record.push(egressNPs[i]);\n          record.push(egressRuleActions[i]);\n          record.push(ingressNPs[i]);\n          record.push(ingressRuleActions[i]);\n          records.push(record);\n        }\n      }\n\n      const names = Array.from(new Set(records.flatMap((d) => [d[0], d[2]])));\n      const color = d3.scaleOrdinal(d3.schemeSet3);\n      const index = new Map(names.map((name: string, i) => [name, i]));\n      // Used to store byte counts of each connection\n      const matrix = Array.from(index, () => new Array(names.length).fill(0));\n      type Connection = {\n        source: string;\n        sourcePort: number;\n        destination: string;\n        destinationPort: number;\n        egressNP: string;\n        ingressNP: string;\n        egressRuleAction: number;\n        ingressRuleAction: number;\n        bytes: number;\n        reverseBytes: number;\n      };\n      // Used to store metadata of each connection\n      const connMap: Map<string, Connection> = new Map();\n      const ruleActionMap: Map<number, string> = new Map([\n        [1, 'Allow'],\n        [2, 'Drop'],\n        [3, 'Reject'],\n      ]);\n\n      for (let record of records) {\n        let source: string = record[0];\n        let sourcePort: number = record[1];\n        let destination: string = record[2];\n        let destiantionPort: number = record[3];\n        let byte: number = record[4];\n        let reverseByte: number = record[5];\n        let egressNP: string = record[6];\n        let egressRuleAction: number = record[7];\n        let ingressNP: string = record[8];\n        let ingressRuleAction: number = record[9];\n        // Enter connection entry into chord matrix\n        matrix[index.get(source)!][index.get(destination)!] += byte;\n        // Enter connection entry into connMap\n        // Enter key\n        let idxStr: string = [index.get(source)!, index.get(destination)!].join(',');\n        // Enter value\n        let conn: Connection = {\n          source: source,\n          sourcePort: sourcePort,\n          destination: destination,\n          destinationPort: destiantionPort,\n          egressNP: egressNP,\n          egressRuleAction: egressRuleAction,\n          ingressNP: ingressNP,\n          ingressRuleAction: ingressRuleAction,\n          bytes: byte,\n          reverseBytes: reverseByte,\n        };\n        connMap.set(idxStr, conn);\n      }\n\n      // step-2: draw chord diagram\n\n      const denyColor = '#EE4B2B';\n      const allowColor = '#228B22';\n      const innerRadius = Math.min(w, h) * 0.5 - 100;\n      const outerRadius = innerRadius + 10;\n      const chord = d3\n        .chordDirected()\n        .padAngle(10 / innerRadius)\n        .sortSubgroups(d3.descending)\n        .sortChords(d3.descending);\n      const arc = d3.arc<d3.ChordGroup>().innerRadius(innerRadius).outerRadius(outerRadius);\n      const ribbon = d3\n        .ribbonArrow<d3.Chord, d3.ChordSubgroup>()\n        .radius(innerRadius - 1)\n        .padAngle(1 / innerRadius);\n      const tooltip = d3\n        .select('body')\n        .append('div')\n        .attr('class', 'tooltip')\n        .style('opacity', 0)\n        .style('position', 'absolute')\n        .style('z-index', '10')\n        .style('background-color', theme.colors.background.secondary)\n        .style('border', 'solid')\n        .style('border-width', '2px')\n        .style('border-radius', '5px')\n        .style('padding', '5px');\n\n      const diagram = svg\n        .attr('width', w)\n        .attr('height', h)\n        .append('g')\n        .attr('transform', 'translate(' + x + ',' + y + ')');\n\n      // Create a transparent background rect as a click area\n      diagram\n        .append('rect')\n        .attr('width', w)\n        .attr('height', h)\n        .attr('transform', 'translate(' + -x + ',' + -y + ')')\n        .style('opacity', 0)\n        .on('click', function () {\n          if (onClick === true) {\n            ribbons.transition().style('opacity', 0.8);\n            onClick = false;\n          }\n        });\n\n      // Give the data matrix to d3.chord(): it will calculate all the info we\n      // need to draw arcs and ribbons\n      const res = chord(matrix);\n\n      // Add outer arcs\n      const arcs = diagram\n        .datum(res)\n        .append('g')\n        .selectAll('g')\n        .data(function (d) {\n          return d.groups;\n        })\n        .enter()\n        .append('g');\n\n      arcs\n        .append('path')\n        .on('mouseover', function (event, d) {\n          if (onClick === true) {\n            return;\n          }\n          let i = d.index;\n          ribbons\n            .filter(function (d) {\n              return d.source.index !== i && d.target.index !== i;\n            })\n            .transition()\n            .style('opacity', 0.1);\n        })\n        .on('mouseout', function (event, d) {\n          if (onClick === true) {\n            return;\n          }\n          let i = d.index;\n          ribbons\n            .filter(function (d) {\n              return d.source.index !== i && d.target.index !== i;\n            })\n            .transition()\n            .style('opacity', 0.8);\n        })\n        .on('click', function (event, d) {\n          event.stopPropagation();\n          onClick = true;\n          let i = d.index;\n          ribbons\n            .filter(function (d) {\n              return d.source.index !== i && d.target.index !== i;\n            })\n            .transition()\n            .style('opacity', 0.1);\n        })\n        .style('fill', function (d) {\n          return color(names[d.index]);\n        })\n        .style('stroke', 'black')\n        .attr('id', function (d) {\n          return 'group' + d.index;\n        })\n        .attr('d', arc);\n\n      // Add text labels to arcs\n      const labels = diagram\n        .append('g')\n        .selectAll('text')\n        .data(res.groups)\n        .enter()\n        .append('text')\n        .each(function (d: any) {\n          d.angle = (d.startAngle + d.endAngle) / 2;\n        })\n        .attr('dy', '.35em')\n        .attr('text-anchor', function (d: any) {\n          return d.angle > Math.PI ? 'end' : null;\n        })\n        .attr('transform', function (d: any) {\n          return (\n            'rotate(' +\n            ((d.angle * 180) / Math.PI - 90) +\n            ')' +\n            'translate(' +\n            (innerRadius + 15) +\n            ')' +\n            (d.angle > Math.PI ? 'rotate(180)' : '')\n          );\n        })\n        .attr('opacity', 0.9);\n\n      // Add namespace to label\n      labels\n        .append('tspan')\n        .style('fill', theme.colors.text.primary)\n        .attr('x', 0)\n        .attr('dy', 0)\n        .text(function (chords, i) {\n          let s = names[i].split('/');\n          if (s[0] !== undefined) {\n            return s[0];\n          } else {\n            return '';\n          }\n        });\n\n      // Add Pod/Service name to label\n      labels\n        .append('tspan')\n        .style('fill', theme.colors.text.primary)\n        .attr('x', 0)\n        .attr('dy', 15)\n        .text(function (chords, i) {\n          let s = names[i].split('/');\n          if (s[1] !== undefined) {\n            return s[1];\n          } else {\n            return '';\n          }\n        });\n\n      // Add inner ribbons\n      const ribbons = diagram\n        .datum(res)\n        .append('g')\n        .selectAll('path')\n        .data(function (d) {\n          return d;\n        })\n        .enter()\n        .append('path');\n\n      ribbons\n        .attr('class', 'ribbons')\n        .attr('d', ribbon)\n        .attr('stroke', 'black')\n        .style('opacity', 0.8)\n        // Set ribbon color, deny -> red, allow -> green, others -> source group color\n        .style('fill', function (d) {\n          const idxStr = [d.source.index, d.target.index].join(',');\n          const egressRuleAction = connMap.get(idxStr)?.egressRuleAction;\n          const ingressRuleAction = connMap.get(idxStr)?.ingressRuleAction;\n          if (egressRuleAction === 2 || egressRuleAction === 3 || ingressRuleAction === 2 || ingressRuleAction === 3) {\n            return denyColor;\n          }\n          if (egressRuleAction === 1 || ingressRuleAction === 1) {\n            return allowColor;\n          }\n          return color(names[d.source.index]);\n        })\n        // Add tooltips to ribbons on mouseover event\n        .on('mouseover', function (event, d) {\n          const idxStr = [d.source.index, d.target.index].join(',');\n          const conn = connMap.get(idxStr)!;\n          let source = conn.source;\n          if (conn.sourcePort !== 0) {\n            source += `:` + conn.sourcePort;\n          }\n          let destination = conn.destination;\n          if (conn.destinationPort !== 0) {\n            destination += `:` + conn.destinationPort;\n          }\n          let texts =\n            `\n          <table style=\"margin-top: 2.5px;\">\n          <tr><td>From: </td><td style=\"text-align: right\">` +\n            source +\n            `</td></tr><tr><td>To: </td><td style=\"text-align: right\">` +\n            destination;\n          // Add egressNetworkPolicy metadata\n          if (conn.egressNP !== '') {\n            texts +=\n              `</td></tr>\n            <tr><td>Egress NetworkPolicy name: </td><td style=\"text-align: right\">` +\n              conn.egressNP +\n              `</td></tr>\n            <tr><td>Egress NetworkPolicy Rule Action: </td><td style=\"text-align: right\">` +\n              ruleActionMap.get(conn.egressRuleAction);\n          }\n          // Add ingressNetworkPolicy metadata\n          if (conn.ingressNP !== '') {\n            texts +=\n              `</td></tr>\n            <tr><td>Ingress NetworkPolicy name: </td><td style=\"text-align: right\">` +\n              conn.ingressNP +\n              `</td></tr>\n            <tr><td>Ingress NetworkPolicy Rule Action: </td><td style=\"text-align: right\">` +\n              ruleActionMap.get(conn.ingressRuleAction);\n          }\n          // Add bytes and reverseBytes\n          texts +=\n            `</td></tr>\n          <tr><td>Bytes: </td><td style=\"text-align: right\">` +\n            conn.bytes +\n            `</td></tr>\n          <tr><td>Reverse Bytes: </td><td style=\"text-align: right\">` +\n            conn.reverseBytes +\n            `</td></tr>\n                  </table>\n                  `;\n          return tooltip\n            .style('opacity', 1)\n            .html(texts)\n            .style('left', event.pageX + 10 + 'px')\n            .style('top', event.pageY - 10 + 'px');\n        })\n        .on('mousemove', function (event, d) {\n          return tooltip.style('top', event.pageY - 10 + 'px').style('left', event.pageX + 10 + 'px');\n        })\n        .on('mouseout', function () {\n          return tooltip.style('opacity', 0);\n        });\n    }\n  });\n\n  return <svg className=\"d3-component\" width={width} height={height} ref={d3Container} />;\n};\n\nexport const ChordPanel = withTheme2(UnthemedChordPanel);\n","import { PanelPlugin } from '@grafana/data';\nimport { ChordOptions } from './types';\nimport { ChordPanel } from './ChordPanel';\n\nexport const plugin = new PanelPlugin<ChordOptions>(ChordPanel).setPanelOptions((builder) => builder);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__200__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","ChordPanel","withTheme2","options","data","width","height","theme","d3Container","useRef","GetFieldVal","fieldName","series","map","fields","find","field","name","toLowerCase","record","values","Array","isArray","buffer","useEffect","current","d3","remove","svg","margin","left","top","right","bottom","onClick","w","h","x","y","records","sourcePods","sourcePorts","destinationSvcs","destinationSvcPorts","destinationPods","destinationPorts","destinationIPs","bytes","reverseBytes","egressNPs","egressRuleActions","ingressNPs","ingressRuleActions","length","i","source","sourcePort","destination","destinationPort","push","names","from","Set","flatMap","color","index","Map","matrix","fill","connMap","ruleActionMap","destiantionPort","byte","reverseByte","egressNP","egressRuleAction","ingressNP","ingressRuleAction","idxStr","join","conn","set","denyColor","allowColor","innerRadius","Math","min","outerRadius","chord","padAngle","sortSubgroups","sortChords","arc","ribbon","radius","tooltip","append","attr","style","colors","background","secondary","diagram","on","ribbons","transition","res","datum","selectAll","groups","enter","event","filter","target","stopPropagation","labels","each","angle","startAngle","endAngle","PI","text","primary","chords","s","split","texts","html","pageX","pageY","className","ref","plugin","PanelPlugin","setPanelOptions","builder"],"sourceRoot":""}